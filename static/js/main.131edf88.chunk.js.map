{"version":3,"sources":["timer.js","randnumapp.js","score.js","serviceWorker.js","index.js"],"names":["Timer","props","starttime","state","count","color","clearInterval","this","timer","setState","setInterval","tick","bind","class","style","onClick","startTimer","stopTimer","resetTimer","React","Component","RandNumApp","nums","numsused","totalnum","number","team","team1","team2","checked","handleSubmit","handleChange","handlePress","handleTeam","handleReset","input","temp","tempnums","i","push","e","target","value","length","randnum","Math","floor","random","newnum","temparray","temparray2","splice","Fragment","map","n","index","htmlFor","id","onChange","onColor","offColor","uncheckedIcon","checkedIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.131edf88.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Timer extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.starttime = 60\r\n    this.state = {count: this.starttime, color: \"green\"}\r\n  }\r\n  componentWillUnmount () {\r\n    clearInterval(this.timer)\r\n  }\r\n  tick () {\r\n    if (this.state.count > 0) {\r\n      this.setState({\r\n        count: this.state.count - 1,\r\n          })\r\n    }\r\n    \r\n    if (this.state.count == 10) {\r\n      this.setState({\r\n        color: \"orange\"\r\n          })\r\n    } else if (this.state.count == 0) {\r\n      this.setState({\r\n        color: \"red\"\r\n          })\r\n    }\r\n  }\r\n  startTimer () {\r\n    clearInterval(this.timer)\r\n    this.timer = setInterval(this.tick.bind(this), 1000)\r\n  }\r\n  stopTimer () {\r\n    clearInterval(this.timer)\r\n  }\r\n  resetTimer () {\r\n    clearInterval(this.timer)\r\n    this.setState({count: this.starttime, color: \"green\"})\r\n  }\r\n  render () {\r\n    return (\r\n      <div class=\"container\">\r\n        <h1>Timer:</h1>\r\n        <h1 style={{color: this.state.color}}>{this.state.count}</h1>\r\n        <div>\r\n          <button onClick={this.startTimer.bind(this)}>Start</button>\r\n          <button onClick={this.stopTimer.bind(this)}>Stop</button>\r\n          <button onClick={this.resetTimer.bind(this)}>Reset</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Timer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Switch from \"react-switch\";\r\n\r\nclass RandNumApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { nums: [], numsused: [], totalnum: 0, number: 0, color: 'green', team: 1, team1: 0, team2: 0, checked: false };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handlePress = this.handlePress.bind(this);\r\n        this.handleTeam = this.handleTeam.bind(this);\r\n        this.handleReset = this.handleReset.bind(this);\r\n    }\r\n\r\n    handleTeam(input) {\r\n        var temp;\r\n        if (input == false) {\r\n            temp = 1;\r\n        } else {\r\n            temp = 2;\r\n        }\r\n\r\n        this.setState(state => ({\r\n            team: temp,\r\n            checked: input\r\n        }));\r\n    }\r\n\r\n    handleReset () {\r\n        this.setState(state => ({\r\n            team1: 0,\r\n            team2: 0\r\n          }));\r\n    }\r\n\r\n    handleSubmit() {\r\n        var tempnums = []\r\n        \r\n        for (var i = 1; i <= this.state.totalnum ; i++) {\r\n            var number = i;\r\n            tempnums.push(number);\r\n        }\r\n\r\n        this.setState(state => ({\r\n          nums: tempnums,\r\n          numsused: [],\r\n          color: \"green\",\r\n          totalnum: this.state.totalnum\r\n        }));\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ totalnum: e.target.value });\r\n    }\r\n\r\n    handlePress() {\r\n        if (this.state.nums.length != 0) {\r\n            if (this.state.number != 0) {\r\n            if (this.state.team == 1) {\r\n                this.setState({ team1: this.state.team1 + 1 })\r\n            } else {\r\n                this.setState({ team2: this.state.team2 + 1 })\r\n            }\r\n            }\r\n            \r\n            var randnum = Math.floor(Math.random() * this.state.nums.length);\r\n\r\n            var newnum = this.state.nums[randnum];\r\n\r\n            var temparray = this.state.numsused;\r\n            temparray.push(newnum);\r\n\r\n            var temparray2 = this.state.nums;\r\n            temparray2.splice(randnum,1);\r\n\r\n            this.setState(state => ({ \r\n                number: newnum,\r\n                nums: temparray2,\r\n                numsused: temparray\r\n            }));\r\n        } else {\r\n            this.setState(state => ({ \r\n                number: 0,\r\n                color: \"red\"\r\n            }));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n            <div class=\"container\">\r\n            <h1>Movie Number:</h1>\r\n            <h1 style={{color: this.state.color}}> {this.state.number} </h1>\r\n            <button onClick={this.handlePress}>New Number</button>\r\n            <p>Numbers to be used: {this.state.nums.map((n, index) => (\r\n                <span>{n}, </span>\r\n            ))} </p>\r\n            <p>Numbers already used: {this.state.numsused.map((n, index) => (\r\n                <span>{n}, </span>\r\n            ))} </p>\r\n            \r\n            <label htmlFor=\"new-num\">\r\n                Enter # of Movies\r\n            </label>\r\n            <input\r\n                id=\"new-num\"\r\n                onChange={this.handleChange}\r\n                value={this.state.totalnum}\r\n            />\r\n            <button onClick={this.handleSubmit}>\r\n                Reset Numbers\r\n            </button>\r\n            </div>\r\n\r\n            <div class=\"container\">\r\n            <h1>Team Scores:</h1>\r\n            <p class=\"team-scores\">Team 1 Score: <span>{this.state.team1}</span> Team 2 Score: <span>{this.state.team2}</span></p>\r\n            <label>\r\n                <span>Select which team is currently going</span>\r\n                <div class=\"switch-cont\"><p style={{color: '#3260a8' }}>Team 1 </p>\r\n                <Switch \r\n                    onChange={this.handleTeam} \r\n                    checked={this.state.checked}\r\n                    onColor=\"#b82a3f\"\r\n                    offColor=\"#3260a8\"\r\n                    uncheckedIcon={false}\r\n                    checkedIcon={false}\r\n                 /><p style={{color: '#b82a3f'}} > Team 2</p></div>\r\n            </label>\r\n            <button onClick={this.handleReset}>\r\n                Reset Points\r\n            </button>\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RandNumApp","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nclass Score extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { team1: 0, team2: 0 };\r\n        this.handleTeam1 = this.handleTeam1.bind(this);\r\n        this.handleTeam2 = this.handleTeam2.bind(this);\r\n        this.handleReset = this.handleReset.bind(this);\r\n    }\r\n\r\n    handleTeam1 () {\r\n        this.setState(state => ({\r\n            team1: state.team1 + 1,\r\n          }));\r\n    }\r\n\r\n    handleTeam2 () {\r\n        this.setState(state => ({\r\n            team2: state.team2 + 1,\r\n          }));\r\n    }\r\n\r\n    handleReset () {\r\n        this.setState(state => ({\r\n            team1: 0,\r\n            team2: 0\r\n          }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n            <div class=\"container\">\r\n            <h1>Team Scores:</h1>\r\n            <p>Team 1 Score: {this.state.team1}   Team 2 Score: {this.state.team2}</p>\r\n            <button onClick={this.handleTeam1}>\r\n                Team 1 Point\r\n            </button>\r\n            <button onClick={this.handleTeam2}>\r\n                Team 2 Point\r\n            </button>\r\n            <button onClick={this.handleReset}>\r\n                Reset Points\r\n            </button>\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Score","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Timer from './timer'\r\nimport RandNumApp from './randnumapp'\r\nimport Score from './score'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Timer />\r\n    <RandNumApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}